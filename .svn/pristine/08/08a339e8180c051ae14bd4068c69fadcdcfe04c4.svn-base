/*!
 * jQuery Validation Plugin 1.11.1
 *
 * http://bassistance.de/jquery-plugins/jquery-plugin-validation/
 * http://docs.jquery.com/Plugins/Validation
 *
 * Copyright 2013 JÃ¶rn Zaefferer
 * Released under the MIT license:
 *   http://www.opensource.org/licenses/mit-license.php
 */

(function() {

    function stripHtml(value) {
        // remove html tags and space chars
        return value.replace(/<.[^<>]*?>/g, ' ').replace(/&nbsp;|&#160;/gi, ' ')
            // remove punctuation
            .replace(/[.(),;:!?%#$'"_+=\/\-]*/g,'');
    }
    jQuery.validator.addMethod("maxWords", function(value, element, params) {
        return this.optional(element) || stripHtml(value).match(/\b\w+\b/g).length <= params;
    }, jQuery.validator.format("Please enter {0} words or less."));

    jQuery.validator.addMethod("minWords", function(value, element, params) {
        return this.optional(element) || stripHtml(value).match(/\b\w+\b/g).length >= params;
    }, jQuery.validator.format("Please enter at least {0} words."));

    jQuery.validator.addMethod("rangeWords", function(value, element, params) {
        var valueStripped = stripHtml(value);
        var regex = /\b\w+\b/g;
        return this.optional(element) || valueStripped.match(regex).length >= params[0] && valueStripped.match(regex).length <= params[1];
    }, jQuery.validator.format("Please enter between {0} and {1} words."));

}());

jQuery.validator.addMethod("letterswithbasicpunc", function(value, element) {
    return this.optional(element) || /^[a-z\-.,()'"\s]+$/i.test(value);
}, "Letters or punctuation only please");

jQuery.validator.addMethod("alphanumeric", function(value, element) {
    return this.optional(element) || /^\w+$/i.test(value);
}, "Letters, numbers, and underscores only please");

jQuery.validator.addMethod("lettersonly", function(value, element) {
    return this.optional(element) || /^[a-z]+$/i.test(value);
}, "Letters only please");

jQuery.validator.addMethod("nowhitespace", function(value, element) {
    return this.optional(element) || /^\S+$/i.test(value);
}, "No white space please");

jQuery.validator.addMethod("ziprange", function(value, element) {
    return this.optional(element) || /^90[2-5]\d\{2\}-\d{4}$/.test(value);
}, "Your ZIP-code must be in the range 902xx-xxxx to 905-xx-xxxx");

jQuery.validator.addMethod("zipcodeUS", function(value, element) {
    return this.optional(element) || /\d{5}-\d{4}$|^\d{5}$/.test(value);
}, "The specified US ZIP Code is invalid");

jQuery.validator.addMethod("integer", function(value, element) {
    return this.optional(element) || /^-?\d+$/.test(value);
}, "A positive or negative non-decimal number please");

/**
 * Return true, if the value is a valid vehicle identification number (VIN).
 *
 * Works with all kind of text inputs.
 *
 * @example <input type="text" size="20" name="VehicleID" class="{required:true,vinUS:true}" />
 * @desc Declares a required input element whose value must be a valid vehicle identification number.
 *
 * @name jQuery.validator.methods.vinUS
 * @type Boolean
 * @cat Plugins/Validate/Methods
 */
jQuery.validator.addMethod("vinUS", function(v) {
    if (v.length !== 17) {
        return false;
    }
    var i, n, d, f, cd, cdv;
    var LL = ["A","B","C","D","E","F","G","H","J","K","L","M","N","P","R","S","T","U","V","W","X","Y","Z"];
    var VL = [1,2,3,4,5,6,7,8,1,2,3,4,5,7,9,2,3,4,5,6,7,8,9];
    var FL = [8,7,6,5,4,3,2,10,0,9,8,7,6,5,4,3,2];
    var rs = 0;
    for(i = 0; i < 17; i++){
        f = FL[i];
        d = v.slice(i,i+1);
        if (i === 8) {
            cdv = d;
        }
        if (!isNaN(d)) {
            d *= f;
        } else {
            for (n = 0; n < LL.length; n++) {
                if (d.toUpperCase() === LL[n]) {
                    d = VL[n];
                    d *= f;
                    if (isNaN(cdv) && n === 8) {
                        cdv = LL[n];
                    }
                    break;
                }
            }
        }
        rs += d;
    }
    cd = rs % 11;
    if (cd === 10) {
        cd = "X";
    }
    if (cd === cdv) {
        return true;
    }
    return false;
}, "The specified vehicle identification number (VIN) is invalid.");

/**
 * Return true, if the value is a valid date, also making this formal check dd/mm/yyyy.
 *
 * @example jQuery.validator.methods.date("01/01/1900")
 * @result true
 *
 * @example jQuery.validator.methods.date("01/13/1990")
 * @result false
 *
 * @example jQuery.validator.methods.date("01.01.1900")
 * @result false
 *
 * @example <input name="pippo" class="{dateITA:true}" />
 * @desc Declares an optional input element whose value must be a valid date.
 *
 * @name jQuery.validator.methods.dateITA
 * @type Boolean
 * @cat Plugins/Validate/Methods
 */
jQuery.validator.addMethod("dateITA", function(value, element) {
    var check = false;
    var re = /^\d{1,2}\/\d{1,2}\/\d{4}$/;
    if( re.test(value)) {
        var adata = value.split('/');
        var gg = parseInt(adata[0],10);
        var mm = parseInt(adata[1],10);
        var aaaa = parseInt(adata[2],10);
        var xdata = new Date(aaaa,mm-1,gg);
        if ( ( xdata.getFullYear() === aaaa ) && ( xdata.getMonth() === mm - 1 ) && ( xdata.getDate() === gg ) ){
            check = true;
        } else {
            check = false;
        }
    } else {
        check = false;
    }
    return this.optional(element) || check;
}, "Please enter a correct date");

/**
 * IBAN is the international bank account number.
 * It has a country - specific format, that is checked here too
 */
jQuery.validator.addMethod("iban", function(value, element) {
    // some quick simple tests to prevent needless work
    if (this.optional(element)) {
        return true;
    }
    if (!(/^([a-zA-Z0-9]{4} ){2,8}[a-zA-Z0-9]{1,4}|[a-zA-Z0-9]{12,34}$/.test(value))) {
        return false;
    }

    // check the country code and find the country specific format
    var iban = value.replace(/ /g,'').toUpperCase(); // remove spaces and to upper case
    var countrycode = iban.substring(0,2);
    var bbancountrypatterns = {
        'AL': "\\d{8}[\\dA-Z]{16}",
        'AD': "\\d{8}[\\dA-Z]{12}",
        'AT': "\\d{16}",
        'AZ': "[\\dA-Z]{4}\\d{20}",
        'BE': "\\d{12}",
        'BH': "[A-Z]{4}[\\dA-Z]{14}",
        'BA': "\\d{16}",
        'BR': "\\d{23}[A-Z][\\dA-Z]",
        'BG': "[A-Z]{4}\\d{6}[\\dA-Z]{8}",
        'CR': "\\d{17}",
        'HR': "\\d{17}",
        'CY': "\\d{8}[\\dA-Z]{16}",
        'CZ': "\\d{20}",
        'DK': "\\d{14}",
        'DO': "[A-Z]{4}\\d{20}",
        'EE': "\\d{16}",
        'FO': "\\d{14}",
        'FI': "\\d{14}",
        'FR': "\\d{10}[\\dA-Z]{11}\\d{2}",
        'GE': "[\\dA-Z]{2}\\d{16}",
        'DE': "\\d{18}",
        'GI': "[A-Z]{4}[\\dA-Z]{15}",
        'GR': "\\d{7}[\\dA-Z]{16}",
        'GL': "\\d{14}",
        'GT': "[\\dA-Z]{4}[\\dA-Z]{20}",
        'HU': "\\d{24}",
        'IS': "\\d{22}",
        'IE': "[\\dA-Z]{4}\\d{14}",
        'IL': "\\d{19}",
        'IT': "[A-Z]\\d{10}[\\dA-Z]{12}",
        'KZ': "\\d{3}[\\dA-Z]{13}",
        'KW': "[A-Z]{4}[\\dA-Z]{22}",
        'LV': "[A-Z]{4}[\\dA-Z]{13}",
        'LB': "\\d{4}[\\dA-Z]{20}",
        'LI': "\\d{5}[\\dA-Z]{12}",
        'LT': "\\d{16}",
        'LU': "\\d{3}[\\dA-Z]{13}",
        'MK': "\\d{3}[\\dA-Z]{10}\\d{2}",
        'MT': "[A-Z]{4}\\d{5}[\\dA-Z]{18}",
        'MR': "\\d{23}",
        'MU': "[A-Z]{4}\\d{19}[A-Z]{3}",
        'MC': "\\d{10}[\\dA-Z]{11}\\d{2}",
        'MD': "[\\dA-Z]{2}\\d{18}",
        'ME': "\\d{18}",
        'NL': "[A-Z]{4}\\d{10}",
        'NO': "\\d{11}",
        'PK': "[\\dA-Z]{4}\\d{16}",
        'PS': "[\\dA-Z]{4}\\d{21}",
        'PL': "\\d{24}",
        'PT': "\\d{21}",
        'RO': "[A-Z]{4}[\\dA-Z]{16}",
        'SM': "[A-Z]\\d{10}[\\dA-Z]{12}",
        'SA': "\\d{2}[\\dA-Z]{18}",
        'RS': "\\d{18}",
        'SK': "\\d{20}",
        'SI': "\\d{15}",
        'ES': "\\d{20}",
        'SE': "\\d{20}",
        'CH': "\\d{5}[\\dA-Z]{12}",
        'TN': "\\d{20}",
        'TR': "\\d{5}[\\dA-Z]{17}",
        'AE': "\\d{3}\\d{16}",
        'GB': "[A-Z]{4}\\d{14}",
        'VG': "[\\dA-Z]{4}\\d{16}"
    };
    var bbanpattern = bbancountrypatterns[countrycode];
    // As new countries will start using IBAN in the
    // future, we only check if the countrycode is known.
    // This prevents false negatives, while almost all
    // false positives introduced by this, will be caught
    // by the checksum validation below anyway.
    // Strict checking should return FALSE for unknown
    // countries.
    if (typeof bbanpattern !== 'undefined') {
        var ibanregexp = new RegExp("^[A-Z]{2}\\d{2}" + bbanpattern + "$", "");
        if (!(ibanregexp.test(iban))) {
            return false; // invalid country specific format
        }
    }

    // now check the checksum, first convert to digits
    var ibancheck = iban.substring(4,iban.length) + iban.substring(0,4);
    var ibancheckdigits = "";
    var leadingZeroes = true;
    var charAt;
    for (var i =0; i<ibancheck.length; i++) {
        charAt = ibancheck.charAt(i);
        if (charAt !== "0") {
            leadingZeroes = false;
        }
        if (!leadingZeroes) {
            ibancheckdigits += "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".indexOf(charAt);
        }
    }

    // calculate the result of: ibancheckdigits % 97
    var cRest = '';
    var cOperator = '';
    for (var p=0; p<ibancheckdigits.length; p++) {
        var cChar = ibancheckdigits.charAt(p);
        cOperator = '' + cRest + '' + cChar;
        cRest = cOperator % 97;
    }
    return cRest === 1;
}, "Please specify a valid IBAN");

jQuery.validator.addMethod("dateNL", function(value, element) {
    return this.optional(element) || /^(0?[1-9]|[12]\d|3[01])[\.\/\-](0?[1-9]|1[012])[\.\/\-]([12]\d)?(\d\d)$/.test(value);
}, "Please enter a correct date");

/**
 * Dutch phone numbers have 10 digits (or 11 and start with +31).
 */
jQuery.validator.addMethod("phoneNL", function(value, element) {
    return this.optional(element) || /^((\+|00(\s|\s?\-\s?)?)31(\s|\s?\-\s?)?(\(0\)[\-\s]?)?|0)[1-9]((\s|\s?\-\s?)?[0-9]){8}$/.test(value);
}, "Please specify a valid phone number.");

jQuery.validator.addMethod("mobileNL", function(value, element) {
    return this.optional(element) || /^((\+|00(\s|\s?\-\s?)?)31(\s|\s?\-\s?)?(\(0\)[\-\s]?)?|0)6((\s|\s?\-\s?)?[0-9]){8}$/.test(value);
}, "Please specify a valid mobile number");

jQuery.validator.addMethod("postalcodeNL", function(value, element) {
    return this.optional(element) || /^[1-9][0-9]{3}\s?[a-zA-Z]{2}$/.test(value);
}, "Please specify a valid postal code");

/*
 * Dutch bank account numbers (not 'giro' numbers) have 9 digits
 * and pass the '11 check'.
 * We accept the notation with spaces, as that is common.
 * acceptable: 123456789 or 12 34 56 789
 */
jQuery.validator.addMethod("bankaccountNL", function(value, element) {
    if (this.optional(element)) {
        return true;
    }
    if (!(/^[0-9]{9}|([0-9]{2} ){3}[0-9]{3}$/.test(value))) {
        return false;
    }
    // now '11 check'
    var account = value.replace(/ /g,''); // remove spaces
    var sum = 0;
    var len = account.length;
    for (var pos=0; pos<len; pos++) {
        var factor = len - pos;
        var digit = account.substring(pos, pos+1);
        sum = sum + factor * digit;
    }
    return sum % 11 === 0;
}, "Please specify a valid bank account number");

/**
 * Dutch giro account numbers (not bank numbers) have max 7 digits
 */
jQuery.validator.addMethod("giroaccountNL", function(value, element) {
    return this.optional(element) || /^[0-9]{1,7}$/.test(value);
}, "Please specify a valid giro account number");

jQuery.validator.addMethod("bankorgiroaccountNL", function(value, element) {
    return this.optional(element) ||
        ($.validator.methods["bankaccountNL"].call(this, value, element)) ||
        ($.validator.methods["giroaccountNL"].call(this, value, element));
}, "Please specify a valid bank or giro account number");


jQuery.validator.addMethod("time", function(value, element) {
    return this.optional(element) || /^([01]\d|2[0-3])(:[0-5]\d){1,2}$/.test(value);
}, "Please enter a valid time, between 00:00 and 23:59");
jQuery.validator.addMethod("time12h", function(value, element) {
    return this.optional(element) || /^((0?[1-9]|1[012])(:[0-5]\d){1,2}(\ ?[AP]M))$/i.test(value);
}, "Please enter a valid time in 12-hour am/pm format");

/**
 * matches US phone number format
 *
 * where the area code may not start with 1 and the prefix may not start with 1
 * allows '-' or ' ' as a separator and allows parens around area code
 * some people may want to put a '1' in front of their number
 *
 * 1(212)-999-2345 or
 * 212 999 2344 or
 * 212-999-0983
 *
 * but not
 * 111-123-5434
 * and not
 * 212 123 4567
 */
jQuery.validator.addMethod("phoneUS", function(phone_number, element) {
    phone_number = phone_number.replace(/\s+/g, "");
    return this.optional(element) || phone_number.length > 9 &&
        phone_number.match(/^(\+?1-?)?(\([2-9]\d{2}\)|[2-9]\d{2})-?[2-9]\d{2}-?\d{4}$/);
}, "Please specify a valid phone number");

jQuery.validator.addMethod('phoneUK', function(phone_number, element) {
    phone_number = phone_number.replace(/\(|\)|\s+|-/g,'');
    return this.optional(element) || phone_number.length > 9 &&
        phone_number.match(/^(?:(?:(?:00\s?|\+)44\s?)|(?:\(?0))(?:\d{2}\)?\s?\d{4}\s?\d{4}|\d{3}\)?\s?\d{3}\s?\d{3,4}|\d{4}\)?\s?(?:\d{5}|\d{3}\s?\d{3})|\d{5}\)?\s?\d{4,5})$/);
}, 'Please specify a valid phone number');

jQuery.validator.addMethod('mobileUK', function(phone_number, element) {
    phone_number = phone_number.replace(/\(|\)|\s+|-/g,'');
    return this.optional(element) || phone_number.length > 9 &&
        phone_number.match(/^(?:(?:(?:00\s?|\+)44\s?|0)7(?:[45789]\d{2}|624)\s?\d{3}\s?\d{3})$/);
}, 'Please specify a valid mobile number');

//Matches UK landline + mobile, accepting only 01-3 for landline or 07 for mobile to exclude many premium numbers
jQuery.validator.addMethod('phonesUK', function(phone_number, element) {
    phone_number = phone_number.replace(/\(|\)|\s+|-/g,'');
    return this.optional(element) || phone_number.length > 9 &&
        phone_number.match(/^(?:(?:(?:00\s?|\+)44\s?|0)(?:1\d{8,9}|[23]\d{9}|7(?:[45789]\d{8}|624\d{6})))$/);
}, 'Please specify a valid uk phone number');
// On the above three UK functions, do the following server side processing:
//  Compare original input with this RegEx pattern:
//   ^\(?(?:(?:00\)?[\s\-]?\(?|\+)(44)\)?[\s\-]?\(?(?:0\)?[\s\-]?\(?)?|0)([1-9]\d{1,4}\)?[\s\d\-]+)$
//  Extract $1 and set $prefix to '+44<space>' if $1 is '44', otherwise set $prefix to '0'
//  Extract $2 and remove hyphens, spaces and parentheses. Phone number is combined $prefix and $2.
// A number of very detailed GB telephone number RegEx patterns can also be found at:
// http://www.aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers

// Matches UK postcode. Does not match to UK Channel Islands that have their own postcodes (non standard UK)
jQuery.validator.addMethod('postcodeUK', function(value, element) {
    return this.optional(element) || /^((([A-PR-UWYZ][0-9])|([A-PR-UWYZ][0-9][0-9])|([A-PR-UWYZ][A-HK-Y][0-9])|([A-PR-UWYZ][A-HK-Y][0-9][0-9])|([A-PR-UWYZ][0-9][A-HJKSTUW])|([A-PR-UWYZ][A-HK-Y][0-9][ABEHMNPRVWXY]))\s?([0-9][ABD-HJLNP-UW-Z]{2})|(GIR)\s?(0AA))$/i.test(value);
}, 'Please specify a valid UK postcode');

// TODO check if value starts with <, otherwise don't try stripping anything
jQuery.validator.addMethod("strippedminlength", function(value, element, param) {
    return jQuery(value).text().length >= param;
}, jQuery.validator.format("Please enter at least {0} characters"));

// same as email, but TLD is optional
jQuery.validator.addMethod("email2", function(value, element, param) {
    return this.optional(element) || /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)*(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i.test(value);
}, jQuery.validator.messages.email);

jQuery.validator.addMethod("email3", function(value, element, param) {
	var reg = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/;
    return this.optional(element) || reg.test(value);
}, jQuery.validator.messages.email);


// same as url, but TLD is optional
jQuery.validator.addMethod("url2", function(value, element, param) {
    return this.optional(element) || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)*(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value);
}, jQuery.validator.messages.url);

// same as url, but TLD is optional
jQuery.validator.addMethod("url3", function(value, element, param) {
    return this.optional(element) || /^((https?|ftp|news):\/\/)?([a-z]([a-z0-9\-]*[\.ã])+([a-z]{2}|aero|arpa|biz|com|coop|edu|gov|info|int|jobs|mil|museum|name|nato|net|org|pro|travel)|(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))(\/[a-z0-9_\-\.~]+)*(\/([a-z0-9_\-\.]*)(\?[a-z0-9+_\-\.%=&]*)?)?(#[a-z][a-z0-9_]*)?$/i.test(value);
}, jQuery.validator.messages.url);

// NOTICE: Modified version of Castle.Components.Validator.CreditCardValidator
// Redistributed under the the Apache License 2.0 at http://www.apache.org/licenses/LICENSE-2.0
// Valid Types: mastercard, visa, amex, dinersclub, enroute, discover, jcb, unknown, all (overrides all other settings)
jQuery.validator.addMethod("creditcardtypes", function(value, element, param) {
    if (/[^0-9\-]+/.test(value)) {
        return false;
    }

    value = value.replace(/\D/g, "");

    var validTypes = 0x0000;

    if (param.mastercard) {
        validTypes |= 0x0001;
    }
    if (param.visa) {
        validTypes |= 0x0002;
    }
    if (param.amex) {
        validTypes |= 0x0004;
    }
    if (param.dinersclub) {
        validTypes |= 0x0008;
    }
    if (param.enroute) {
        validTypes |= 0x0010;
    }
    if (param.discover) {
        validTypes |= 0x0020;
    }
    if (param.jcb) {
        validTypes |= 0x0040;
    }
    if (param.unknown) {
        validTypes |= 0x0080;
    }
    if (param.all) {
        validTypes = 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040 | 0x0080;
    }
    if (validTypes & 0x0001 && /^(5[12345])/.test(value)) { //mastercard
        return value.length === 16;
    }
    if (validTypes & 0x0002 && /^(4)/.test(value)) { //visa
        return value.length === 16;
    }
    if (validTypes & 0x0004 && /^(3[47])/.test(value)) { //amex
        return value.length === 15;
    }
    if (validTypes & 0x0008 && /^(3(0[012345]|[68]))/.test(value)) { //dinersclub
        return value.length === 14;
    }
    if (validTypes & 0x0010 && /^(2(014|149))/.test(value)) { //enroute
        return value.length === 15;
    }
    if (validTypes & 0x0020 && /^(6011)/.test(value)) { //discover
        return value.length === 16;
    }
    if (validTypes & 0x0040 && /^(3)/.test(value)) { //jcb
        return value.length === 16;
    }
    if (validTypes & 0x0040 && /^(2131|1800)/.test(value)) { //jcb
        return value.length === 15;
    }
    if (validTypes & 0x0080) { //unknown
        return true;
    }
    return false;
}, "Please enter a valid credit card number.");

jQuery.validator.addMethod("ipv4", function(value, element, param) {
    return this.optional(element) || /^(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)$/i.test(value);
}, "Please enter a valid IP v4 address.");

jQuery.validator.addMethod("ipv6", function(value, element, param) {
    return this.optional(element) || /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i.test(value);
}, "Please enter a valid IP v6 address.");

/**
 * Return true if the field value matches the given format RegExp
 *
 * @example jQuery.validator.methods.pattern("AR1004",element,/^AR\d{4}$/)
 * @result true
 *
 * @example jQuery.validator.methods.pattern("BR1004",element,/^AR\d{4}$/)
 * @result false
 *
 * @name jQuery.validator.methods.pattern
 * @type Boolean
 * @cat Plugins/Validate/Methods
 */
jQuery.validator.addMethod("pattern", function(value, element, param) {
    if (this.optional(element)) {
        return true;
    }
    if (typeof param === 'string') {
        param = new RegExp('^(?:' + param + ')$');
    }
    return param.test(value);
}, "Invalid format.");


/*
 * Lets you say "at least X inputs that match selector Y must be filled."
 *
 * The end result is that neither of these inputs:
 *
 *  <input class="productinfo" name="partnumber">
 *  <input class="productinfo" name="description">
 *
 *  ...will validate unless at least one of them is filled.
 *
 * partnumber:  {require_from_group: [1,".productinfo"]},
 * description: {require_from_group: [1,".productinfo"]}
 *
 */
jQuery.validator.addMethod("require_from_group", function(value, element, options) {
    var validator = this;
    var selector = options[1];
    var validOrNot = $(selector, element.form).filter(function() {
        return validator.elementValue(this);
    }).length >= options[0];

    if(!$(element).data('being_validated')) {
        var fields = $(selector, element.form);
        fields.data('being_validated', true);
        fields.valid();
        fields.data('being_validated', false);
    }
    return validOrNot;
}, $.validator.format("Please fill at least {0} of these fields."));

/*
 * Lets you say "either at least X inputs that match selector Y must be filled,
 * OR they must all be skipped (left blank)."
 *
 * The end result, is that none of these inputs:
 *
 *  <input class="productinfo" name="partnumber">
 *  <input class="productinfo" name="description">
 *  <input class="productinfo" name="color">
 *
 *  ...will validate unless either at least two of them are filled,
 *  OR none of them are.
 *
 * partnumber:  {skip_or_fill_minimum: [2,".productinfo"]},
 *  description: {skip_or_fill_minimum: [2,".productinfo"]},
 * color:       {skip_or_fill_minimum: [2,".productinfo"]}
 *
 */
jQuery.validator.addMethod("skip_or_fill_minimum", function(value, element, options) {
    var validator = this,
        numberRequired = options[0],
        selector = options[1];
    var numberFilled = $(selector, element.form).filter(function() {
        return validator.elementValue(this);
    }).length;
    var valid = numberFilled >= numberRequired || numberFilled === 0;

    if(!$(element).data('being_validated')) {
        var fields = $(selector, element.form);
        fields.data('being_validated', true);
        fields.valid();
        fields.data('being_validated', false);
    }
    return valid;
}, $.validator.format("Please either skip these fields or fill at least {0} of them."));

// Accept a value from a file input based on a required mimetype
jQuery.validator.addMethod("accept", function(value, element, param) {
    // Split mime on commas in case we have multiple types we can accept
    var typeParam = typeof param === "string" ? param.replace(/\s/g, '').replace(/,/g, '|') : "image/*",
        optionalValue = this.optional(element),
        i, file;

    // Element is optional
    if (optionalValue) {
        return optionalValue;
    }

    if ($(element).attr("type") === "file") {
        // If we are using a wildcard, make it regex friendly
        typeParam = typeParam.replace(/\*/g, ".*");

        // Check if the element has a FileList before checking each file
        if (element.files && element.files.length) {
            for (i = 0; i < element.files.length; i++) {
                file = element.files[i];

                // Grab the mimetype from the loaded file, verify it matches
                if (!file.type.match(new RegExp( ".?(" + typeParam + ")$", "i"))) {
                    return false;
                }
            }
        }
    }

    // Either return true because we've validated each file, or because the
    // browser does not support element.files and the FileList feature
    return true;
}, $.validator.format("Please enter a value with a valid mimetype."));

// Older "accept" file extension method. Old docs: http://docs.jquery.com/Plugins/Validation/Methods/accept
jQuery.validator.addMethod("extension", function(value, element, param) {
    param = typeof param === "string" ? param.replace(/,/g, '|') : "png|jpe?g|gif";
    return this.optional(element) || value.match(new RegExp(".(" + param + ")$", "i"));
}, $.validator.format("Please enter a value with a valid extension."));

//æç©ºæ ¼
jQuery.validator.addMethod("unBlank", function(value, element) {
    return this.optional(element) || !/\s/g.test(value);
}, $.validator.format("ä¸è½å«æç©ºæ ¼"));

//ä¼ä¸ç»å½å
jQuery.validator.addMethod("comUserName", function(value, element) {
    return this.optional(element) || /^[a-zA-Z|0-9|_]{6,20}$/.test(value);
}, $.validator.format("è¯·è¾å¥6-20ä½(å­æ¯ãæ°å­ãä¸åçº¿)"));

//ç¨æ·å
jQuery.validator.addMethod("userName", function(value, element) {
    return this.optional(element) || /^[^`~!ï¼@Â·#$ï¿¥%^&*()ï¼ï¼\-ï¼+=ï¼|ï½\\\][\]\{\}:ï¼;ï¼'\,ï¼.ããã<>\/?ï¼]+$/gi.test(value);
}, $.validator.format("ä¸è½å«æç¹æ®ç¬¦å·"));

//ä¸è½åç¬å­æ¯ãæ°å­ãç¬¦å·
jQuery.validator.addMethod("notOnly", function(value, element) {
    var letter=/^[a-zA-Z]+$/gi.test(value);
    var number=/^[0-9]+$/gi.test(value);
    var sign=/^[~!@#$%^&*()_+|\-=\{\}\[\]:\\\'":;,.\/?<>`,]+$/gi.test(value);
    var flag=false;
    if(!letter && !number && !sign){
        flag=true;
    }
    return this.optional(element) || flag;
}, $.validator.format("å¯ç ä¸è½æ¯åç¬çå­æ¯ãæ°å­æç¬¦å·"));

//ä¸è½åç¬å­æ¯ãæ°å­ãç¬¦å·,å­ä¸ªæå·é¤å¤
jQuery.validator.addMethod("notOnly1", function(value, element) {
    var flag=false;
    if(value!="******"){
        var letter=/^[a-zA-Z]+$/gi.test(value);
        var number=/^[0-9]+$/gi.test(value);
        var sign=/^[~!@#$%^&*()_+|\-=\{\}\[\]:\\\'":;,.\/?<>`,]+$/gi.test(value);
        if(!letter && !number && !sign){
            flag=true;
        }
    }else{
        flag=true;
    }

    return this.optional(element) || flag;
}, $.validator.format("å¯ç ä¸è½æ¯åç¬çå­æ¯ãæ°å­æç¬¦å·"));

$.validator.addMethod("notEqualTo", function(value, element,param) {
    var name=$(param).val();
    return this.optional(element) || value!=name;
}, $.validator.format("å¯ç ä¸è½åç¨æ·åéå¤"));

//ææºå·ç éªè¯
$.validator.addMethod("isMobile", function(value, element) {
    var length = value.length;
    return this.optional(element) || (length == 11 && /^((1[3-9][0-9])+\d{8})$/.test(value));
}, $.validator.format("è¯·æ­£ç¡®å¡«åæ¨çææºå·ç "));

//çµè¯å·ç éªè¯ï¼éå¯¹åºå®çµè¯ï¼
$.validator.addMethod("isPhone", function(value, element) {
    //var tel = /^(\d{3,4}-?)?\d{7,9}$/g;
    // var tel = /^((\+?[0-9]{2,4}\-[0-9]{3,4}\-)|([0-9]{3,4}\-))?([0-9]{7,8})(\-[0-9]+)?$/;
    var tel = /^((\+?[0-9]{2,4}\-[0-9]{3,4}\-)|([0-9]{3,4}\-))?([0-9]{6,8})(\-[0-9]{0,6})?$/;
    return this.optional(element) || (tel.test(value));
}, $.validator.format("è¯·æ­£ç¡®å¡«åæ¨ççµè¯å·ç "));

//çµè¯å·ç éªè¯ï¼åæ¬ææºï¼
$.validator.addMethod("isTel", function(value, element) {
    // var tel = /^((\+?[0-9]{2,4}\-[0-9]{3,4}\-)|([0-9]{3,4}\-))?([0-9]{7,8})(\-[0-9]+)?$/;
    var tel =/^((\+?[0-9]{2,4}\-[0-9]{3,4}\-)|([0-9]{3,4}\-))?([0-9]{6,8})(\-[0-9]{0,6})?$/;
    var mobile= /^((1[3-9][0-9])+\d{8})$/;
    return this.optional(element) || (tel.test(value) || mobile.test(value));
}, $.validator.format("è¯·æ­£ç¡®å¡«åæ¨ççµè¯å·ç "));

//çµè¯å·ç åºå·
$.validator.addMethod("isAreaCode", function(value, element) {
    var reg = /^[0-9]{3,4}$/;
    return this.optional(element) || reg.test(value);
}, $.validator.format("åºå·æè¯¯"));
//æ£æ¥åå¸ä¸åºå·å³è
$.validator.addMethod("checkAreaCodeTo", function(value, element, param) {
    var cityId=$(param).val();
    var ac=common.json.getAreaCodeById(cityId);
    return this.optional(element) || value.toString()==ac.toString();
}, $.validator.format("ä¸æ¨æå¨å°çåºå·ä¸ç¬¦"));

//çµè¯å·ç ï¼æ åºå·æ åæº
$.validator.addMethod("isPhoneA", function(value, element) {
    var reg = /^[1-9]\d{6,7}$/;
    return this.optional(element) || reg.test(value);
}, $.validator.format("çµè¯å·ç æè¯¯"));

//åæºå·
$.validator.addMethod("isExtNo", function(value, element) {
    var reg = /^[0-9]{1,6}$/;
    return this.optional(element) || reg.test(value);
}, $.validator.format("åæºå·æè¯¯"));


//éªè¯ç 
$.validator.addMethod("isCaptcha", function(value, element) {
    var reg = /^[0-9a-zA-Z]{6}$/;
    return this.optional(element) || reg.test(value);
}, $.validator.format("è¯·æ­£ç¡®çéªè¯ç "));

$.validator.addMethod("isImgCaptcha", function(value, element) {
    var reg = /^[0-9a-zA-Z]{4}$/;
    return this.optional(element) || reg.test(value);
}, $.validator.format("è¯·æ­£ç¡®çéªè¯ç "));


// é®æ¿ç¼ç éªè¯
$.validator.addMethod("isZipCode", function(value, element) {
    var reg = /^[0-9]{6}$/;
    return this.optional(element) || reg.test(value);
}, $.validator.format("è¯·æ­£ç¡®å¡«åæ¨çé®æ¿ç¼ç "));

// QQå·ç éªè¯
$.validator.addMethod("isQQ", function(value, element) {
    var reg = /^[1-9]\d{4,9}$/;
    return this.optional(element) || reg.test(value);
}, $.validator.format("è¯·æ­£ç¡®å¡«åæ¨çQQå·ç "));

//æå¤å­æ°
$.validator.addMethod("maxWords", function(value, element, params) {
    //å­æ°ä»¥ä¸­æå­ä¸ºåºç¡..2ä¸ªå­æ¯åæ°å­ä¸ºä¸ä¸ªå­,å³2ä¸ªåè§ç¬¦ä¸ºä¸ä¸ªæ±å­
    return this.optional(element) || value.replace(/[^\x00-\xff]/g, "**").length <= params*2;
}, $.validator.format("æ¨è¾å¥çå­æ°è¶è¿{0}ä¸ªä¸­æå­"));
//æå°å­æ°
$.validator.addMethod("minWords", function(value, element, params) {
    //å­æ°ä»¥ä¸­æå­ä¸ºåºç¡..2ä¸ªå­æ¯åæ°å­ä¸ºä¸ä¸ªå­,å³2ä¸ªåè§ç¬¦ä¸ºä¸ä¸ªæ±å­
    return this.optional(element) || value.replace(/[^\x00-\xff]/g, "**").length >= params*2;
}, $.validator.format("æ¨è¾å¥çå­æ°å°äº{0}ä¸ªä¸­æå­"));

//èº«ä»½è¯15ä½è½¬18ä½ä¸­,è®¡ç®æ ¡éªä½å³æåä¸ä½
function GetVerifyBit(id){
    var result;
    var nNum=eval(id.charAt(0)*7+id.charAt(1)*9+id.charAt(2)*10+id.charAt(3)*5+id.charAt(4)*8+id.charAt(5)*4+id.charAt(6)*2+id.charAt(7)*1+id.charAt(8)*6+id.charAt(9)*3+id.charAt(10)*7+id.charAt(11)*9+id.charAt(12)*10+id.charAt(13)*5+id.charAt(14)*8+id.charAt(15)*4+id.charAt(16)*2);
    nNum=nNum%11;
    switch (nNum) {
        case 0 :
            result="1";
            break;
        case 1 :
            result="0";
            break;
        case 2 :
            result="X";
            break;
        case 3 :
            result="9";
            break;
        case 4 :
            result="8";
            break;
        case 5 :
            result="7";
            break;
        case 6 :
            result="6";
            break;
        case 7 :
            result="5";
            break;
        case 8 :
            result="4";
            break;
        case 9 :
            result="3";
            break;
        case 10 :
            result="2";
            break;
    }
    //document.write(result);
    return result;
}

/*
 åè½ï¼éªè¯èº«ä»½è¯å·ç æ¯å¦ææ
 æ ç¤ºä¿¡æ¯ï¼æªè¾å¥æè¾å¥èº«ä»½è¯å·ä¸æ­£ç¡®ï¼
 ä½¿ç¨ï¼validateIdCard(obj,birthday,s)//sï¼1ä¸ºç·ï¼0ä¸ºå¥³
 è¿åï¼0,1,2,3,4,5
 */
function validateIdCard(obj,birthday,s){
    var aCity={11:"åäº¬",12:"å¤©æ´¥",13:"æ²³å",14:"å±±è¥¿",15:"åèå¤",21:"è¾½å®",22:"åæ",23:"é»é¾ æ±",31:"ä¸æµ·",32:"æ±è",33:"æµæ±",34:"å®å¾½",35:"ç¦å»º",36:"æ±è¥¿",37:"å±±ä¸",41:"æ²³å",42:"æ¹ å",43:"æ¹å",44:"å¹¿ä¸",45:"å¹¿è¥¿",46:"æµ·å",50:"éåº",51:"åå·",52:"è´µå·",53:"äºå",54:"è¥¿ è",61:"éè¥¿",62:"çè",63:"éæµ·",64:"å®å¤",65:"æ°ç",71:"å°æ¹¾",81:"é¦æ¸¯",82:"æ¾³é¨",91:"å½ å¤"};
    var iSum = 0;
    //var info = "";
    var strIDno = obj;
    if(birthday!=null){
        birthday = birthday.replace(/-/g,"/");
    }

    var idCardLength = strIDno.length;
    if(!/^\d{17}(\d|x)$/i.test(strIDno)&&!/^\d{15}$/i.test(strIDno)){
        return 1; //éæ³èº«ä»½è¯å·
    }
    if(aCity[parseInt(strIDno.substr(0,2))]==null){
        return 2;// éæ³å°åº
    }

    // 15ä½èº«ä»½è¯è½¬æ¢ä¸º18ä½
    if (idCardLength==15){
        sBirthday = "19" + strIDno.substr(6,2) + "-" + Number(strIDno.substr(8,2)) + "-" + Number(strIDno.substr(10,2));
        var d = new Date(sBirthday.replace(/-/g,"/"));
        var dd = d.getFullYear().toString() + "-" + (d.getMonth()+1) + "-" + d.getDate();
        var genderNo=strIDno.substr(14,1);
        if(sBirthday != dd){
            return 3; //éæ³çæ¥
        }
        if(birthday==""){
            return 4;//æ¨è¿æ²¡å¡«ååºçæ¥æ
        }

        if(birthday!=null && d.getTime()!=new Date(birthday).getTime()){
            return 5; //ä¸åºçæ¥æä¸ç¬¦
        }
        if(s!=null && s!=0 && s!=1){
            return 6;//æ¨è¿æ²¡å¡«åæ§å«
        }

        if(s!=null && genderNo%2!=s){
            return 7;//ä¸æ§å«ä¸ç¬¦
        }

        strIDno=strIDno.substring(0,6)+"19"+strIDno.substring(6,15);
        strIDno=strIDno+GetVerifyBit(strIDno);
    }
    // å¤æ­æ¯å¦å¤§äº2078å¹´ï¼å°äº1900å¹´
    var year =strIDno.substring(6,10);
    if (year<1900 || year>2078 ){
        return 3;//éæ³çæ¥
    }
    /*if(){

     }*/
    //18ä½èº«ä»½è¯å¤ç
    //å¨åé¢çè¿ç®ä¸­xç¸å½äºæ°å­10,æä»¥è½¬æ¢æa
    strIDno = strIDno.replace(/x$/i,"a");

    sBirthday=strIDno.substr(6,4)+"-"+Number(strIDno.substr(10,2))+"-"+Number(strIDno.substr(12,2));
    var d = new Date(sBirthday.replace(/-/g,"/"));
    var genderNo=strIDno.substr(16,1);
    if(sBirthday!=(d.getFullYear()+"-"+ (d.getMonth()+1) + "-" + d.getDate())){
        return 3; //éæ³çæ¥
    }
    if(birthday==""){
        return 4;//æ¨è¿æ²¡å¡«ååºçæ¥æ
    }
    if(birthday!=null && d.getTime()!=new Date(birthday).getTime()){
        return 5; //ä¸åºçæ¥æä¸ç¬¦
    }

    if(s!=null && s!=0 && s!=1){
        return 6;//æ¨è¿æ²¡å¡«åæ§å«
    }
    if(s!=null && genderNo%2!=s){
        return 7;//ä¸æ§å«ä¸ç¬¦
    }
    // èº«ä»½è¯ç¼ç è§èéªè¯
    for(var i = 17;i>=0;i --){
        iSum += (Math.pow(2,i) % 11) * parseInt(strIDno.charAt(17 - i),11);
    }
    if(iSum%11!=1){
        return 1;// éæ³èº«ä»½è¯å·
    }
    // å¤æ­æ¯å¦å±è½èº«ä»½è¯
    var words = new Array();
    words = new Array("11111119111111111","12121219121212121");

    for(var k=0;k<words.length;k++){
        if (strIDno.indexOf(words[k])!=-1){
            return 1;
        }
    }
    return 0;
}

//é¢è¯å°å
$.validator.addMethod("iAddressCheck", function(value, element, param){
    var flag=true;
    var j = $(param[0]).val();
    if(j===""){
        return true;
    }
    if($(element).val()==null || $(element).val()==""){
        flag = false;
    }
    return flag;
},$.validator.format("{1}"));

//èº«ä»½è¯ï¼æ å³èéªè¯ï¼
$.validator.addMethod("cretID", function(value, element, param){
    var n=validateIdCard(value);
    var error=["","éæ³èº«ä»½è¯å·","å°åºç¼å·ä¸åæ³","åºçæ¥æä¸åæ³"];
    param[1]=error[n];
    return this.optional(element) || n==0;

},$.validator.format("{1}"));

//è¯ä»¶
$.validator.addMethod("cret", function (value, element,param) {
    var type = $("#cardType").find("option").filter(':selected').attr("value");
    if(type==""){
        return true;
    }
    if(type=="1"){
        var $gender = $('[name="gender"]').filter(':checked');
        var s;
        if($gender.val()==1){s=1;}
        if($gender.val()==2){s=0;}
        var n=validateIdCard(value,$("#birthday").val(),s);
        var error=["","éæ³èº«ä»½è¯å·","å°åºç¼å·ä¸åæ³","åºçæ¥æä¸åæ³","æ¨è¿æ²¡å¡«ååºçæ¥æ","ä¸æ¨å¡«åçåºçæ¥æä¸ä¸è´","æ¨è¿æ²¡éæ©æ§å«","ä¸æ¨éæ©çæ§å«ä¸ä¸è´"];
        if(n==5){
            $("#birthday").addClass("error");
        }else{
            $("#birthday").removeClass("error");
        }
        if(n==7){
            $gender.parent().css({border:"solid 1px #f60"});
        }else{
            $('[name="gender"]').parent().css({border:"0 none"});
        }
        param[1]=error[n];
        return this.optional(element) || n==0;
        //}else if(type=="3"){
        //var passport = /(P\d{7})|(G\d{8})/;
        //return this.optional(element) || (passport.test(value));
        //}else if(type=="2"){
        //var passport =/^[0-9]{6,8}$/;
        //return this.optional(element) || (passport.test(value));
    }else{
        var passport =/[a-z\d]{5,18}$/i;
        param[1]="è¯·æ­£ç¡®è¾å¥æ¨çè¯ä»¶å·ç ";
        return this.optional(element) || (passport.test(value));
    }
},$.validator.format("{1}"));

//éå¶éå·è¾å¥
$.validator.addMethod("disComma", function (value, element) {
    return this.optional(element) || /^[^,ï¼]+$/gi.test(value);
},$.validator.format("ä¸è½å«æéå·"));

//èªå®ä¹æ±èæåèä½
$.validator.addMethod("customJobName", function (value, element,param) {
    var str = (common.str.dTrim(value).replace(/(\s+)|(ã+)/g," ")).split(" ");
    var length=str.length;
    return this.optional(element) || length <= param ;
},$.validator.format("è¶è¿{0}ä¸ªèä½ï¼è¯·ä¿®æ¹"));

//å³é®è¯
$.validator.addMethod("keyWord", function (value, element,param) {
    var key = (common.str.dTrim(value).replace(/(\s+)|(ã+)/g," ")).split(" ");
    var length=key.length;
    var flag=true;
    param[2]="è¶è¿"+param[0]+"ä¸ªå³é®è¯ï¼è¯·ä¿®æ¹";
    var err1="";
    for(var i=0;i<length;i++){
        var n=common.str.len(key[i],2);
        if(n > param[1]){
            flag=false;
            err1+='å³é®è¯ã<strong class="cBlue">'+key[i]+'</strong>ãè¶è¿'+param[1]+'ä¸ªå­ç¬¦;<br />';
        }
    }
    if(!flag){
        param[2]=err1;
    }
    //alert(length);
    return this.optional(element) || flag && length <= param[0];

},$.validator.format("{2}"));

//æ¥ææ¯è¾
$.validator.addMethod("compDate", function (value,element,param) {
    var $parent=$(element).parent().parent();
    var sy=$parent.find('[name="beginDateYear"]').val(),sm=$parent.find('[name="beginDateMonth"]').val();
    var ey=$parent.find('[name="endDateYear"]').val(),em=$parent.find('[name="endDateMonth"]').val();
    var sD,eD;
    var flag=true;
    if(param[0]==1){
        if(sy!="" && sm!="" && ey!=""){
            if(sy>ey){
                flag = false;
            }
        }
    }
    if(param[0]==2){
        if(sy!="" && ey==sy && sm!=""){
            if(sm>em){
                flag = false;
            }
        }
    }
    return this.optional(element) || flag;
},$.validator.format("ç»ææ¥æä¸è½å°äºå¼å§æ¥æ"));

//ç»ææ¥æ
$.validator.addMethod("endDateTo",function(value,element,param) {
    var startDate = $(param).val();
    var flag = true;
    if(value!="" && startDate!=""){
        flag=parseInt(startDate.replace("-", "")) <= parseInt(value.replace("-", ""));
    }
    return this.optional(element) || flag;
},$.validator.format("ç»ææ¥æå¿é¡»å¤§äºå¼å§æ¥æ!"));

//æå°å¹´é¾
$.validator.addMethod("minAge", function(value, element, params) {
    var flag=true;
    var date=params[1] || null;
    var age=parseFloat((new Date(value.replace(/-/g,"/"))).getAge(date));
    flag=age>=params[0];
    return this.optional(element) || flag;
}, $.validator.format("æ¨çå¹´é¾æªæ»¡{0}å¨å²"));

//æå°æ¶é´(æ³¨ï¼è¦è½¬ä¸ºç¸åæ ¼å¼)
$.validator.addMethod("minTime", function(value, element, params) {
    var time=(new Date(value.replace(/-/g,"/"))).getTime();
    var cTime=(new Date(params.replace(/-/g,"/"))).getTime();
    return this.optional(element) || time >= cTime;
}, $.validator.format("æ¶é´ä¸è½å°äº{0}"));

//æå¤§æ¶é´(æ³¨ï¼è¦è½¬ä¸ºç¸åæ ¼å¼)
$.validator.addMethod("maxTime", function(value, element, params) {
    var time=(new Date(value.replace(/-/g,"/"))).getTime();
    var cTime=(new Date(params.replace(/-/g,"/"))).getTime();
    return this.optional(element) || time <= cTime;
}, $.validator.format("æ¶é´ä¸è½å¤§äº{0}"));

//ç¸èè¡¨åé¡¹å¿é¡»åå¡«å
$.validator.addMethod("checkTo", function(value, element, param) {
    var o=$(param[0]).val();
    return this.optional(element) || o!="";
}, $.validator.format("{1}"));


/*ç¨æ·ååå¯ç è¿æ»¤ç¹ç¬¦å­ç¬¦èªå®ä¹éªè¯æ¹æ³*/
$.validator.addMethod("isFilterSymbol", function(value, element) {
    var reg = /^[^\(\)'<>\\]+$/gi;
    return this.optional(element) || reg.test(value);
}, $.validator.format("è¯·å¿è¾å¥å¦ä¸ç¬¦å·(),',<>,\\,"));
